Assignment 1

1.Write an algorithm for insertion sort and write stepwise execution table for whole insertion sort.

Algorithm
Step 1 -Get Array of elements from user
Step 2 -Create a for loop for the number of elements and start the while loop by
Step 3 -Create a key element as the second element from the array and compare it with its previous element
		Assert for true(Arr[previous element] > Arr[key])
		create a temporavary variable and swap their values
		Assert for false(Arr[precious element] <= 0 OR Arr[key] == Arr[precious element])
Step 4 -display the array with the sorted elements

Psedocode
Array Arr=(5,1,3,4)
for(i=1 to n do)
begin
	j=i;
	A{Assert P_A:TRUE}
	while(j>0 && Arr[j-1]>Arr[j])
		key = Arr[j];
		Arr[j]=Arr[j-1];
		Arr[j-1]=key;
	B{Assert P_B:j<0 OR j=j0 and i=i0}
end
endforloop

Java Program
class InsertionSort 
{ 
    /*Function to sort array using insertion sort*/
    void sort(int arr[]) 
    { 
        int n = arr.length; 
        for (int i=1; i<n; ++i) 
        { 
            int key = arr[i]; 
            int j = i-1; 
  
            /* Move elements of arr[0..i-1], that are 
               greater than key, to one position ahead 
               of their current position */
            while (j>=0 && arr[j] > key) 
            { 
                arr[j+1] = arr[j]; 
                j = j-1; 
            } 
            arr[j+1] = key; 
        } 
    } 
  
    /* A utility function to print array of size n*/
    static void printArray(int arr[]) 
    { 
        int n = arr.length; 
        for (int i=0; i<n; ++i) 
            System.out.print(arr[i] + " "); 
  
        System.out.println(); 
    } 
  
    // Driver method 
    public static void main(String args[]) 
    {         
        int arr[] = {12, 11, 13, 5, 6}; 
  
        InsertionSort ob = new InsertionSort();         
        ob.sort(arr); 
          
        printArray(arr); 
    } 
}

Test Case
(1) arr[] = {12,11,13,5,6}
    Output= 5,6,11,12,13

(2) arr[] = {20,40,30,10,50}
	Output= 10,20,30,40,50
	

3. Design an algorithm that makes the following exchanges:
a<-b<-c<-d<-a

Algorithm
Step 1 -Get the elements from user
Step 2 -Assert for True (first !=0 and second !=0)
		first=first+second;
		second=first-second;
		first=first-second;
		Assert for False (first ==0 or second ==0)
Step 3 -Assert for True (second !=0 and third !=0)
		second=second+third;
		third=second-third;
		second=second-third;
		Assert for False (second ==0 or third ==0)
Step 4 -Assert for True (third !=0 and fourth !=0)
		third=third+fourth;
		fourth=third-fourth;
		third=third-fourth;
		Assert for False (third ==0 or fourth ==0)
Step 5 -Display the values

Psedocode
a=6,b=9,c=10,d=50
A{Assert P_A:True}
if(a!=0 && b!=0)
{	
	a = a + b;
	b = a - b;
	a = a - b;
}
A{Assert P_A: a=a0 or b=b0)
B{Assert P_B:True}
if(b!=0 && c!=0)
{
	b = b + c
	c = b – c
	b = b – c
}
B{Assert P_B: b=b0 or c=c0)
C{Assert P_C:True}
if(c!=0 && d!=0)
{
	c = c + d
	d = c – d
	c = c – d
}
C{Assert P_C: c=c0 or d=d0)

Program
class GFG { 
      
    static void swap(int a, int b, int c, int d) 
    { 
          
        // swapping a and b variables 
        a = a + b; 
        b = a - b; 
        a = a - b; 
      
        // swapping b and c variables 
        b = b + c; 
        c = b - c; 
        b = b - c; 
      
        // swapping c and d variables 
        c = c + d; 
        d = c - d; 
        c = c - d; 
      
        System.out.println("values after "+ "swapping are : "); 
        System.out.println("a = " + a); 
        System.out.println("b = " + b); 
        System.out.println("c = " + c); 
        System.out.println("d = " + d); 
    } 
      
    // Driver function 
    public static void main(String[] args) 
    { 
          
        // initialising variables 
        int a = 1; 
        int b = 2; 
        int c = 3; 
        int d = 4; 
      
        System.out.println("values before "+ "swapping are : "); 
        System.out.println("a = " + a); 
        System.out.println("b = " + b); 
        System.out.println("c = " + c); 
        System.out.println("d = " + d); 
        System.out.println(""); 
        swap(a, b, c, d); 
      
    } 
} 

Test case
(1) Input   a=1,b=2,c=3,d=4
	Output  a=2,b=3,c=4,d=1

(2) Input   a=10,b=20,c=15,d=5
	Output  a=20,b=15,c=5,d=10


5. Design an algorithm that reads a list of numbers and makes a count of the number of negatives and non-negav 	members

Algorithm
Step 1 -Get Array of elements from user
Step 2 -Create a for loop for the number of elements
Step 3 -Assert for True (Arr[element] > 0)
		Increase the positve varibale count
		Assert for False (Arr[element] < 0)
		Increase the negative varibale count
Step 4 -Gisplay the posive and negative variable count

Psedocode
Array Arr=(3,-4,5,6,-7)
for(i=0 to n do)
	begin
	A{Assert P_A:True}
	if(Arr[i]>0)
	pos=pos+1;
	B{Assert P_B:False}
	if(Arr[i]<0)
	neg=neg+1;
	end
endforloop

Java Program
class CountCalculation
{
public static void main(String args[])
{
	int pos,neg;
	Array Arr[]={3,-4,5,6,-7}
	for(int i=0;i<Arr.length();i++)
	{
		if(Arr[i]>0)
		pos++;
		else
		neg++;
	}
	System.out.print(pos+","+neg);
}
}

Test Case
(1) Input Arr[]={3,-4,5,6,-7}
	Output  2,3
	
(2) Input Arr[]={5,-5,3,2,4,-6}
	Output  4,2

	
7. Develop an algorithm that prints out n values of sequence

1 -1 1 -1 1 -1 .......

Algorithm
Step 1 -Declare an Array with n nummber of elements
Step 2 -Create a for loop
		Assert for True (element==0 OR element%2==0)
		Store the element as 1
		Assert for False (element!=0 AND element%2!=0)
		Store the element as -1
Step 3 -Display the Array

Psedocode
Array Arr[];
for(i=0 to n do)
	begin
	A{Assert P_A:True}
	if(i==0 OR i%2==0)
	Arr[i]=1;
	B{Assert P_B:False}
	if(i!=0 AND i%2!=0)
	Arr[i]=-1;
	end
endforloop

Java Program
import java.util.Scanner;
class Pattern
{
public static void main(String args[])
{
	Scanner sc=new Scanner(System.in);
	int n=sc.nextInt();
	Array Arr[n]=new Array[];
	for(int i=0;i<n;i++)
	{
	if(i==0 || i%2==0)
	Arr[i]=1;
	else if(i!=0 && i%2!=0)
	Arr[i]=-1;
	}
	for(int i=0;i<n;i++)
	{
	if(i!=n)
		System.out.print(Arr[i]+", ");
	else
		System.out.print(Arr[i]);
	}
}
}

Test Case
(1) Input   5
	Output  1,-1,1,-1,1
(2) Input   10
	Output  1,-1,1,-1,1,-1,1,-1,1,-1