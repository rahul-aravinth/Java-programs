1. Design an algorithm to find the first, second and third maximum value and position in any given array set.

ALGORITHM
Step 1 -Create an array with the user input elements.
Step 2 -Create a duplicate array.
Step 3 -Assert for True( Elements are positive )
		Assign the elements in ascending order.
		Assert for False( All the elements are not positive )
Step 4 -Get the position of last three elements by comparing it with the initial array
		and return their position
		
PSEDOCODE
a[]={1,2,4,5,7,10,8,6}
b[]=a;
for(i=0 to 7 do)
	begin
	for(j=i+1 to 7 do)
		begin
		if(a[i]>a[j])
		temp = a[i];
		a[i] = a[j];
		a[j] = temp;
		end
	endforloop
	end
endforloop
for(i=7 to 4 do)
	begin
	for(j=1 to 7 do)
		begin
		if(a[i]=b[j])
		Print b[j] && j; 
		end
	endforloop
	end
endforloop

JAVA PROGRAM
class Day3_Q1
{
    public static void main(String args[])
    {
        int a[]={1,4,5,9,7,3,6};				//Array
        int b[]=new int[a.length];				//Copy of Array 1
        for(int i=0;i<a.length;i++)
        {
            b[i]=a[i];
        }
        int temp=0;								//Temp int
        for(int i=0;i<6;i++)
        {
            for(int j=i+1;j<=6;j++)
            {
                if(a[i]>a[j])
                {
                    temp=a[j];
                    a[j]=a[i];
                    a[i]=temp;
                }
            }
        }
        for(int i=6;i>=4;i--)					
        {
            for(int j=0;j<=6;j++)
            {
                if(a[i]==b[j])
                {
                    System.out.println(b[j]+"->"+(j+1));
                }
            }
        }
    }
}

6. Write an algorithm and program to implement for selection sort

ALGORITHM
1.Create an array and initialize the elements.
2.Select the smallest value and replace it in first element.
3.find the next smallest value and replace it in second element.
4.Do this for the rest of the array and the array wll be sorted.

JAVA PROGRAM
class SelectionSort 
{ 
    void sort(int arr[]) 
    { 
        int n = arr.length; 
  
        // One by one move boundary of unsorted subarray 
        for (int i = 0; i < n-1; i++) 
        { 
            // Find the minimum element in unsorted array 
            int min_idx = i; 
            for (int j = i+1; j < n; j++) 
                if (arr[j] < arr[min_idx]) 
                    min_idx = j; 
  
            // Swap the found minimum element with the first 
            // element 
            int temp = arr[min_idx]; 
            arr[min_idx] = arr[i]; 
            arr[i] = temp; 
        } 
    } 
  
    // Prints the array 
    void printArray(int arr[]) 
    { 
        int n = arr.length; 
        for (int i=0; i<n; ++i) 
            System.out.print(arr[i]+" "); 
        System.out.println(); 
    } 
  
    // Driver code to test above 
    public static void main(String args[]) 
    { 
        SelectionSort ob = new SelectionSort(); 
        int arr[] = {64,25,12,22,11}; 
        ob.sort(arr); 
        System.out.println("Sorted array"); 
        ob.printArray(arr); 
    } 
} 

TEST CASE
Input 	- 64,25,12,22,11
Output 	- 11,12,22,25,64

7. Write an algorithm and progrram to implement for merge sort

ALGORITHM
MergeSort(arr[], l,  r)
If r > l
     1. Find the middle point to divide the array into two halves:  
             middle m = (l+r)/2
     2. Call mergeSort for first half:   
             Call mergeSort(arr, l, m)
     3. Call mergeSort for second half:
             Call mergeSort(arr, m+1, r)
     4. Merge the two halves sorted in step 2 and 3:
             Call merge(arr, l, m, r)

JAVA PROGRAM
class MergeSort 
{ 
    // Merges two subarrays of arr[]. 
    // First subarray is arr[l..m] 
    // Second subarray is arr[m+1..r] 
    void merge(int arr[], int l, int m, int r) 
    { 
        // Find sizes of two subarrays to be merged 
        int n1 = m - l + 1; 
        int n2 = r - m; 
  
        /* Create temp arrays */
        int L[] = new int [n1]; 
        int R[] = new int [n2]; 
  
        /*Copy data to temp arrays*/
        for (int i=0; i<n1; ++i) 
            L[i] = arr[l + i]; 
        for (int j=0; j<n2; ++j) 
            R[j] = arr[m + 1+ j]; 
  
  
        /* Merge the temp arrays */
  
        // Initial indexes of first and second subarrays 
        int i = 0, j = 0; 
  
        // Initial index of merged subarry array 
        int k = l; 
        while (i < n1 && j < n2) 
        { 
            if (L[i] <= R[j]) 
            { 
                arr[k] = L[i]; 
                i++; 
            } 
            else
            { 
                arr[k] = R[j]; 
                j++; 
            } 
            k++; 
        } 
  
        /* Copy remaining elements of L[] if any */
        while (i < n1) 
        { 
            arr[k] = L[i]; 
            i++; 
            k++; 
        } 
  
        /* Copy remaining elements of R[] if any */
        while (j < n2) 
        { 
            arr[k] = R[j]; 
            j++; 
            k++; 
        } 
    } 
  
    // Main function that sorts arr[l..r] using 
    // merge() 
    void sort(int arr[], int l, int r) 
    { 
        if (l < r) 
        { 
            // Find the middle point 
            int m = (l+r)/2; 
  
            // Sort first and second halves 
            sort(arr, l, m); 
            sort(arr , m+1, r); 
  
            // Merge the sorted halves 
            merge(arr, l, m, r); 
        } 
    } 
  
    /* A utility function to print array of size n */
    static void printArray(int arr[]) 
    { 
        int n = arr.length; 
        for (int i=0; i<n; ++i) 
            System.out.print(arr[i] + " "); 
        System.out.println(); 
    } 
  
    // Driver method 
    public static void main(String args[]) 
    { 
        int arr[] = {12, 11, 13, 5, 6, 7}; 
  
        System.out.println("Given Array"); 
        printArray(arr); 
  
        MergeSort ob = new MergeSort(); 
        ob.sort(arr, 0, arr.length-1); 
  
        System.out.println("\nSorted array"); 
        printArray(arr); 
    } 
} 

TEST CASE

Input
12 11 13 5 6 7
Output
5 6 7 11 12 13

8. Write an algorithm and program to implement for heap sort.

ALGORITHM
1. Build a max heap from the input data.
2. At this point, the largest item is stored at the root of the heap. Replace it with the last item of the heap followed by reducing the size of heap by 1. Finally, heapify the root of tree.
3. Repeat above steps while size of heap is greater than 1.

JAVA PROGRAM
class HeapSort 
{ 
    public void sort(int arr[]) 
    { 
        int n = arr.length; 
  
        // Build heap (rearrange array) 
        for (int i = n / 2 - 1; i >= 0; i--) 
            heapify(arr, n, i); 
  
        // One by one extract an element from heap 
        for (int i=n-1; i>=0; i--) 
        { 
            // Move current root to end 
            int temp = arr[0]; 
            arr[0] = arr[i]; 
            arr[i] = temp; 
  
            // call max heapify on the reduced heap 
            heapify(arr, i, 0); 
        } 
    } 
  
    // To heapify a subtree rooted with node i which is 
    // an index in arr[]. n is size of heap 
    void heapify(int arr[], int n, int i) 
    { 
        int largest = i; // Initialize largest as root 
        int l = 2*i + 1; // left = 2*i + 1 
        int r = 2*i + 2; // right = 2*i + 2 
  
        // If left child is larger than root 
        if (l < n && arr[l] > arr[largest]) 
            largest = l; 
  
        // If right child is larger than largest so far 
        if (r < n && arr[r] > arr[largest]) 
            largest = r; 
  
        // If largest is not root 
        if (largest != i) 
        { 
            int swap = arr[i]; 
            arr[i] = arr[largest]; 
            arr[largest] = swap; 
  
            // Recursively heapify the affected sub-tree 
            heapify(arr, n, largest); 
        } 
    } 
  
    /* A utility function to print array of size n */
    static void printArray(int arr[]) 
    { 
        int n = arr.length; 
        for (int i=0; i<n; ++i) 
            System.out.print(arr[i]+" "); 
        System.out.println(); 
    } 
  
    // Driver program 
    public static void main(String args[]) 
    { 
        int arr[] = {12, 11, 13, 5, 6, 7}; 
        int n = arr.length; 
  
        HeapSort ob = new HeapSort(); 
        ob.sort(arr); 
  
        System.out.println("Sorted array is"); 
        printArray(arr); 
    } 
} 

TEST CASE

Input	-12, 11, 13, 5, 6, 7
Output	-5, 6, 7, 11, 12, 13

11. Write an algorithm and program to implement 8 queens problem under 8 x 8 by using backtracking method.

ALGORITHM 
Step 1 -Create an nxn matrix with the input from the user
Step 2 -Get the position from the user
Step 3 -Mark all the diagonals of that position to a symbol
Step 4 -Assert for True(position not on the marked place)
	If the marked symbol is accessed the Queen must not be placed
	Assert for False(position that is not marked)
Step 5 -If n Queens are placed in the board Display Winner!!.


JAVA PROGRAM
import java.util.Scanner;
class Nqueen
{
    public static void main(String args[]) throws Exception {

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Matrix size : ");
        int n=sc.nextInt();
        sc.nextLine();
        char a[][] = new char[n][n];
        for(int i=0;i<n;i++) {
            for (int j = 0; j < n; j++) {
                a[i][j] = '0';
            }
        }
        System.out.println("INITIAL STEP -");
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                System.out.print(a[i][j]+" ");
            }
            System.out.println();
        }
        int score=100;
        int detuction=score/n;
        int noplaceflag=0;
        int i=0;
        for(i=1;i<=n;i++) {
            String str = sc.nextLine();
            int ia[] = new int[3];
            ia[0] = (int) str.charAt(0) - 49;
            ia[1] = (int) str.charAt(2) - 49;
            if (a[ia[0]][ia[1]] != 'X')
                a[ia[0]][ia[1]] = 'Q';
            else {
                System.out.println(" Wrong Move !!!");
                System.out.println(" Try again ");
                score = score - detuction;
                continue;
            }
            for (int k = 0; k < n; k++) {
                if (a[ia[0]][k] != 'Q')
                    a[ia[0]][k] = 'X';
            }
            for (int k = 0; k < n; k++) {
                if (a[k][ia[1]] != 'Q')
                    a[k][ia[1]] = 'X';
            }
            int x = ia[0];
            int y = ia[1];
            int temp = ia[1] + 1;
            for (int m = 0; m < temp; m++) {
                if (a[x][y] != 'Q')
                    a[x][y] = 'X';
                if (x < (n - 1)) {
                    x++;
                    y--;
                }
            }
            int xx = ia[0];
            int yy = ia[1];
            temp = n - ia[1];
            for (int m = 0; m < temp; m++) {
                if (a[xx][yy] != 'Q')
                    a[xx][yy] = 'X';
                if (xx < (n - 1) && yy < (n - 1)) {
                    xx++;
                    yy++;
                }
            }
            x = ia[0];
            y = ia[1];
            temp = ia[1] + 1;
            for (int m = 0; m < temp; m++) {
                if (a[x][y] != 'Q')
                    a[x][y] = 'X';
                if (x > 0) {
                    x--;
                    y--;
                }
            }
            xx = ia[0];
            yy = ia[1];
            temp = n - ia[1];
            for (int m = 0; m < temp; m++) {
                if (a[xx][yy] != 'Q')
                    a[xx][yy] = 'X';
                if (xx > 0 && yy > 0) {
                    xx--;
                    yy++;
                }
            }
            System.out.println("NEXT STEP - ");
            for (int k = 0; k < n; k++) {
                for (int j = 0; j < n; j++) {
                    System.out.print(a[j][k] + " ");
                }
                System.out.println();
            }
            int noplace=0;
            for(int q=0;q<n;q++)
            {
                for(int j=0;j<n;j++)
                {
                    if(a[q][j]!='0')
                    {
                        noplace++;
                    }
                }
            }
            if(noplace==(n*n))
            {
                noplaceflag=1;
                break;
            }
        }
        if(noplaceflag==1)
        {
            System.out.println(" There is no place to place the Queen !!!");
        }
        else {
            if (score == 100) {
                System.out.println("Winner !!!");
                System.out.println("Your score is :100 ");
            } else if (score > 0 && score != 100) {
                System.out.println("Your score is :" + score);
            } else if (score < 0) {
                System.out.println("Sorry no more moves Your Score is 0");
            }
        }
    }
}
